#! /bin/sh

VERSION=1.0.14

install_darwin() {
	command -v brew &>/dev/null && test "$1" != "no-brew"
	if [ "$?" != "0" ]; then
		say Installing Kryptonite...
		install_darwin_manual
	else
		#	Check if already installed with brew
		ls -l `command -v kr` | grep Cellar &>/dev/null
		if [ "$?" = "0" ]; then
			say Upgrading Kryptonite with Homebrew...
			ensure brew update -v
			ensure brew upgrade kryptco/tap/kr && brew link --overwrite kryptco/tap/kr
		else
			say "Installing Kryptonite with Homebrew. If Homebrew is too slow or fails, try \"curl https://krypt.co/kr | bash -s no-brew\""
			ensure brew update -v
			ensure brew install kryptco/tap/kr && brew link --overwrite kryptco/tap/kr
			if [ "$?" != "0"  ]; then
				echo 
				read -p "Kryptonite Homebrew install failed. Try manual installation?" -n 1 -r < /dev/tty

				if [ $REPLY != ^[Yy]$ ]
				then
					install_darwin_manual
				fi
			fi
		fi
	fi
}

verify_bottle_hash() {
	say OpenSSL command line found, verifying downloaded binary hash...
	DOWNLOADED_HASH=`openssl dgst -sha256 -hex /tmp/$KR_FILE_PREFIX.tar.gz | awk '{print $2}'`
	test "$DOWNLOADED_HASH" = "$BOTTLE_HASH" || (say "Downloaded binary hash incorrect. Aborting."; rm /tmp/$KR_FILE_PREFIX.tar.gz; exit 1) || exit 1
	say "Binary verified."
}

install_darwin_manual() {
	need_cmd mv
	need_cmd cp
	need_cmd curl
	need_cmd rm
	need_cmd tar
	need_cmd launchctl
	need_cmd perl
	need_cmd mkdir
	need_cmd touch
	need_cmd printf

	MAJOR_MAC_VERSION=$(sw_vers -productVersion | awk -F '.' '{print $1 "." $2}')
	case $MAJOR_MAC_VERSION in
		10.10) OS_NAME=yosemite; BOTTLE_HASH=cf2da43450aea8ada00f64ff96ed36e9c5b67cf81bbd60779db60f1bfa879ac3;;
		10.11) OS_NAME=el_capitan; BOTTLE_HASH=5d532e1c3ee22fe344db4ca56e0d6fbc12c031ef5a2415554b03671b65740765;;
		10.12) OS_NAME=sierra; BOTTLE_HASH=36372e113bd3966c728efe7a3e11448b2405f77d65afaa5d7ef8eb16d5cfd008;;
		*) say "Unsupported OS X version $MAJOR_MAC_VERSION. Kryptonite requires 10.10+" && exit 1 ;;
	esac
	say Downloading Kryptonite.
	KR_FILE_PREFIX=kr-$VERSION.$OS_NAME
	ensure curl -# -o /tmp/$KR_FILE_PREFIX.tar.gz -L https://github.com/KryptCo/bottles/raw/master/$KR_FILE_PREFIX.bottle.tar.gz

	command -v openssl &>/dev/null && verify_bottle_hash

	ensure mk_owned_dir_if_not_exists /usr/local/lib
	ensure mk_owned_dir_if_not_exists /usr/local/bin
	ensure mk_owned_dir_if_not_exists /usr/local/share/kr

	ignore rm -rf /tmp/kr
	ensure tar xf /tmp/$KR_FILE_PREFIX.tar.gz -C /tmp/
	ensure mv_maybe_sudo "/tmp/kr/$VERSION/bin/*" /usr/local/bin/
	ensure mv_maybe_sudo "/tmp/kr/$VERSION/lib/*" /usr/local/lib/
	ensure mv_maybe_sudo "/tmp/kr/$VERSION/share/kr/*" /usr/local/share/kr/

	perl -0777 -pi -e 's/\@\@HOMEBREW_PREFIX\@\@/\/usr\/local/' /usr/local/share/kr/co.krypt.krd.plist
	ensure mkdir -p ~/Library/LaunchAgents/
	ensure cp /usr/local/share/kr/co.krypt.krd.plist ~/Library/LaunchAgents/

	ignore launchctl stop ~/Library/LaunchAgents/co.krypt.krd.plist &>/dev/null
	ignore launchctl unload ~/Library/LaunchAgents/co.krypt.krd.plist &>/dev/null
	ensure launchctl load ~/Library/LaunchAgents/co.krypt.krd.plist
	
	ensure mkdir -p ~/.ssh
	ensure touch ~/.ssh/config
	#	remove old ssh_configs
	perl -0777 -pi -e 's/\n# Added by Kryptonite\nHost \*\n\tPKCS11Provider \/usr\/local\/lib\/kr-pkcs11.so\n\tProxyCommand \`find \/usr\/local\/bin\/krssh 2\>\/dev\/null \|\| which nc\` %h %p\n\tIdentityFile kryptonite//g' ~/.ssh/config
	perl -0777 -pi -e 's/\n# Added by Kryptonite\nHost \*\n\tPKCS11Provider \/usr\/local\/lib\/kr-pkcs11.so//g' ~/.ssh/config

	perl -0777 -ne '/\n# Added by Kryptonite\nHost \*\n\tPKCS11Provider \/usr\/local\/lib\/kr-pkcs11.so\n\tProxyCommand \`find \/usr\/local\/bin\/krssh 2\>\/dev\/null \|\| which nc\` %h %p\n\tIdentityFile kryptonite/ || exit(1)' ~/.ssh/config || printf "\n# Added by Kryptonite\nHost *\n\tPKCS11Provider /usr/local/lib/kr-pkcs11.so\n\tProxyCommand \`find /usr/local/bin/krssh 2>/dev/null || which nc\` %%h %%p\n\tIdentityFile kryptonite" >> ~/.ssh/config

	say Kryptonite installed successfully. Type \"kr pair\" to pair with the Kryptonite mobile app.
	kr restart &>/dev/null
}

install_linux() {
	need_cmd apt-get
	need_cmd apt-add-repository
	need_cmd apt-key
	need_cmd sleep
	say Adding KryptCo signing key...
	ensure sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5A09AF10221D7066
	say Adding KryptCo repository...
	ignore sudo add-apt-repository --remove "deb http://kryptco.github.io/deb kryptco main" &>/dev/null
	sleep 1
	ensure sudo add-apt-repository "deb http://kryptco.github.io/deb kryptco main"
	sleep 1
	ensure sudo apt-get update
	say Installing kr...
	ensure sudo apt-get install kr -y
}

install() {
	unamestr=`uname`
	if [ "$unamestr" = 'Linux' ]; then
		install_linux "$@"
	elif [ "$unamestr" = 'Darwin' ]; then
		install_darwin "$@"
	else
		say "OS $unamestr Unsupported"
		exit 1
	fi
}

is_my_dir() {
	test "`ls -ld $1 | awk 'NR==1 {print $3}'`" = "$USER"
}

#	mv $1 to $2, using sudo if necessary
#	$2 must be a directory, not the new file name
mv_maybe_sudo() {
	(is_my_dir $2 && ensure mv -f $1 $2) || ensure warn_sudo mv -f $1 $2
}

warn_sudo() {
	sudo -n true 2>/dev/null || say "sudo required for command $@"
	sudo "$@"
}

mk_owned_dir_if_not_exists() {
	if [ ! -d "$1" ]; then
		mkdir -p $1 &> /dev/null || (ensure warn_sudo mkdir -p $1 && ensure warn_sudo chown $USER $1)
	fi
}

# Copyright 2016 The Rust Project Developers. See the COPYRIGHT
# file at the top-level directory of this distribution and at
# http://rust-lang.org/COPYRIGHT.
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.
say() {
    echo "kr: $@"
}

say_err() {
    say "$@" >&2
}

err() {
    say "$@" >&2
    exit 1
}

need_cmd() {
    if ! command -v "$1" > /dev/null 2>&1
    then err "need '$1' (command not found)"
    fi
}

need_ok() {
    if [ $? != 0 ]; then err "$1"; fi
}

assert_nz() {
    if [ -z "$1" ]; then err "assert_nz $2"; fi
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    "$@"
    need_ok "command failed: $*"
}

# This is just for indicating that commands' results are being
# intentionally ignored. Usually, because it's being executed
# as part of error handling.
ignore() {
    run "$@"
}

# Runs a command and prints it to stderr if it fails.
run() {
    "$@"
    local _retval=$?
    if [ $_retval != 0 ]; then
        say_err "command failed: $*"
    fi
    return $_retval
}

install "$@"
